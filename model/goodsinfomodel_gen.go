// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsInfoFieldNames          = builder.RawFieldNames(&GoodsInfo{})
	goodsInfoRows                = strings.Join(goodsInfoFieldNames, ",")
	goodsInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	goodsInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsInfoFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	goodsInfoModel interface {
		Insert(ctx context.Context, data *GoodsInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GoodsInfo, error)
		Update(ctx context.Context, data *GoodsInfo) error
		Delete(ctx context.Context, id int64) error
		GetGoodsListInTypeID(ctx context.Context, typeID string, id, limit int64) (*[]GoodsInfo, error)
		GetGoodsListByIds(ctx context.Context, ids string) (*[]GoodsInfo, error)
	}

	defaultGoodsInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodsInfo struct {
		Id         int64     `db:"id"`
		Title      string    `db:"title"`       // 商品名称
		Cover      string    `db:"cover"`       // 封面图
		Picture    string    `db:"picture"`     // 商品图片的json格式数据
		Profile    string    `db:"profile"`     // 商品简介
		Prices     float64   `db:"prices"`      // 商品价格
		Detail     string    `db:"detail"`      // 商品详情
		TypeId     int64     `db:"type_id"`     // 商品类别
		BusinessId int64     `db:"business_id"` // 商家ID
		GoodsKey   string    `db:"goods_key"`   // 商品关键字
		OpId       int64     `db:"op_id"`       // 操作人ID
		State      int64     `db:"state"`       // 商品状态 1:未上架 2：以上架 3：以下架
		UpdateTime time.Time `db:"update_time"`
		CreateTime time.Time `db:"create_time"`
	}
)

func newGoodsInfoModel(conn sqlx.SqlConn) *defaultGoodsInfoModel {
	return &defaultGoodsInfoModel{
		conn:  conn,
		table: "`goods_info`",
	}
}

func (m *defaultGoodsInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoodsInfoModel) FindOne(ctx context.Context, id int64) (*GoodsInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsInfoRows, m.table)
	var resp GoodsInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsInfoModel) GetGoodsListInTypeID(ctx context.Context, typeID string, id, limit int64) (*[]GoodsInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` > ? ", goodsInfoRows, m.table)
	if typeID != "" {
		query = fmt.Sprintf("%s and `type_id` in (%s) ", query, typeID)
	}
	query = fmt.Sprintf("%s limit %d", query, limit)
	var resp []GoodsInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsInfoModel) GetGoodsListByIds(ctx context.Context, ids string) (*[]GoodsInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` in (%s) ", goodsInfoRows, m.table, ids)
	var resp []GoodsInfo
	err := m.conn.QueryRowsCtx(ctx, &resp, query)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsInfoModel) Insert(ctx context.Context, data *GoodsInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, goodsInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Cover, data.Picture, data.Profile, data.Prices, data.Detail, data.TypeId, data.BusinessId, data.GoodsKey, data.OpId, data.State)
	return ret, err
}

func (m *defaultGoodsInfoModel) Update(ctx context.Context, data *GoodsInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodsInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Cover, data.Picture, data.Profile, data.Prices, data.Detail, data.TypeId, data.BusinessId, data.GoodsKey, data.OpId, data.State, data.Id)
	return err
}

func (m *defaultGoodsInfoModel) tableName() string {
	return m.table
}
