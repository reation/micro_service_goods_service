// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	goodsTypeFieldNames          = builder.RawFieldNames(&GoodsType{})
	goodsTypeRows                = strings.Join(goodsTypeFieldNames, ",")
	goodsTypeRowsExpectAutoSet   = strings.Join(stringx.Remove(goodsTypeFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	goodsTypeRowsWithPlaceHolder = strings.Join(stringx.Remove(goodsTypeFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	goodsTypeModel interface {
		Insert(ctx context.Context, data *GoodsType) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GoodsType, error)
		Update(ctx context.Context, data *GoodsType) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGoodsTypeModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GoodsType struct {
		Id         int64     `db:"id"`
		Title      string    `db:"title"`     // 类别名称
		Explain    string    `db:"explain"`   // 类别说明
		ParentId   int64     `db:"parent_id"` // 父类ID
		State      int64     `db:"state"`     // 状态 0:冻结 1:正常
		OpId       int64     `db:"op_id"`     // 操作人ID
		UpdateTime time.Time `db:"update_time"`
		CreateTime time.Time `db:"create_time"`
	}
)

func newGoodsTypeModel(conn sqlx.SqlConn) *defaultGoodsTypeModel {
	return &defaultGoodsTypeModel{
		conn:  conn,
		table: "`goods_type`",
	}
}

func (m *defaultGoodsTypeModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGoodsTypeModel) FindOne(ctx context.Context, id int64) (*GoodsType, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", goodsTypeRows, m.table)
	var resp GoodsType
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGoodsTypeModel) Insert(ctx context.Context, data *GoodsType) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, goodsTypeRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Title, data.Explain, data.ParentId, data.State, data.OpId)
	return ret, err
}

func (m *defaultGoodsTypeModel) Update(ctx context.Context, data *GoodsType) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, goodsTypeRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Title, data.Explain, data.ParentId, data.State, data.OpId, data.Id)
	return err
}

func (m *defaultGoodsTypeModel) tableName() string {
	return m.table
}
