// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goods_detail.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodsDetailClient is the client API for GoodsDetail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsDetailClient interface {
	GoodsDetail(ctx context.Context, in *GoodsDetailRequest, opts ...grpc.CallOption) (*GoodsDetailResponse, error)
	GetGoodsListByIDList(ctx context.Context, in *GetGoodsListByIDListRequest, opts ...grpc.CallOption) (*GetGoodsListByIDListResponse, error)
}

type goodsDetailClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsDetailClient(cc grpc.ClientConnInterface) GoodsDetailClient {
	return &goodsDetailClient{cc}
}

func (c *goodsDetailClient) GoodsDetail(ctx context.Context, in *GoodsDetailRequest, opts ...grpc.CallOption) (*GoodsDetailResponse, error) {
	out := new(GoodsDetailResponse)
	err := c.cc.Invoke(ctx, "/goods_detail.GoodsDetail/GoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsDetailClient) GetGoodsListByIDList(ctx context.Context, in *GetGoodsListByIDListRequest, opts ...grpc.CallOption) (*GetGoodsListByIDListResponse, error) {
	out := new(GetGoodsListByIDListResponse)
	err := c.cc.Invoke(ctx, "/goods_detail.GoodsDetail/GetGoodsListByIDList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsDetailServer is the server API for GoodsDetail service.
// All implementations must embed UnimplementedGoodsDetailServer
// for forward compatibility
type GoodsDetailServer interface {
	GoodsDetail(context.Context, *GoodsDetailRequest) (*GoodsDetailResponse, error)
	GetGoodsListByIDList(context.Context, *GetGoodsListByIDListRequest) (*GetGoodsListByIDListResponse, error)
	mustEmbedUnimplementedGoodsDetailServer()
}

// UnimplementedGoodsDetailServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsDetailServer struct {
}

func (UnimplementedGoodsDetailServer) GoodsDetail(context.Context, *GoodsDetailRequest) (*GoodsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsDetail not implemented")
}
func (UnimplementedGoodsDetailServer) GetGoodsListByIDList(context.Context, *GetGoodsListByIDListRequest) (*GetGoodsListByIDListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsListByIDList not implemented")
}
func (UnimplementedGoodsDetailServer) mustEmbedUnimplementedGoodsDetailServer() {}

// UnsafeGoodsDetailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsDetailServer will
// result in compilation errors.
type UnsafeGoodsDetailServer interface {
	mustEmbedUnimplementedGoodsDetailServer()
}

func RegisterGoodsDetailServer(s grpc.ServiceRegistrar, srv GoodsDetailServer) {
	s.RegisterService(&GoodsDetail_ServiceDesc, srv)
}

func _GoodsDetail_GoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsDetailServer).GoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods_detail.GoodsDetail/GoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsDetailServer).GoodsDetail(ctx, req.(*GoodsDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoodsDetail_GetGoodsListByIDList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsListByIDListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsDetailServer).GetGoodsListByIDList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods_detail.GoodsDetail/GetGoodsListByIDList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsDetailServer).GetGoodsListByIDList(ctx, req.(*GetGoodsListByIDListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsDetail_ServiceDesc is the grpc.ServiceDesc for GoodsDetail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsDetail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods_detail.GoodsDetail",
	HandlerType: (*GoodsDetailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoodsDetail",
			Handler:    _GoodsDetail_GoodsDetail_Handler,
		},
		{
			MethodName: "GetGoodsListByIDList",
			Handler:    _GoodsDetail_GetGoodsListByIDList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods_detail.proto",
}
