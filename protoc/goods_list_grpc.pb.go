// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: goods_list.proto

package protoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoodsListClient is the client API for GoodsList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsListClient interface {
	GoodsList(ctx context.Context, in *GoodsListRequest, opts ...grpc.CallOption) (*GoodsListResponse, error)
}

type goodsListClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsListClient(cc grpc.ClientConnInterface) GoodsListClient {
	return &goodsListClient{cc}
}

func (c *goodsListClient) GoodsList(ctx context.Context, in *GoodsListRequest, opts ...grpc.CallOption) (*GoodsListResponse, error) {
	out := new(GoodsListResponse)
	err := c.cc.Invoke(ctx, "/goods_list.GoodsList/GoodsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsListServer is the server API for GoodsList service.
// All implementations must embed UnimplementedGoodsListServer
// for forward compatibility
type GoodsListServer interface {
	GoodsList(context.Context, *GoodsListRequest) (*GoodsListResponse, error)
	mustEmbedUnimplementedGoodsListServer()
}

// UnimplementedGoodsListServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsListServer struct {
}

func (UnimplementedGoodsListServer) GoodsList(context.Context, *GoodsListRequest) (*GoodsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodsList not implemented")
}
func (UnimplementedGoodsListServer) mustEmbedUnimplementedGoodsListServer() {}

// UnsafeGoodsListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsListServer will
// result in compilation errors.
type UnsafeGoodsListServer interface {
	mustEmbedUnimplementedGoodsListServer()
}

func RegisterGoodsListServer(s grpc.ServiceRegistrar, srv GoodsListServer) {
	s.RegisterService(&GoodsList_ServiceDesc, srv)
}

func _GoodsList_GoodsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodsListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsListServer).GoodsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goods_list.GoodsList/GoodsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsListServer).GoodsList(ctx, req.(*GoodsListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoodsList_ServiceDesc is the grpc.ServiceDesc for GoodsList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoodsList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods_list.GoodsList",
	HandlerType: (*GoodsListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoodsList",
			Handler:    _GoodsList_GoodsList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods_list.proto",
}
